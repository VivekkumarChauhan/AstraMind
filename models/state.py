"""
State model for the AI Agentic Research System.
Defines the structure of data passed between agents.
"""
from typing import List, Dict, Any, Optional
from langchain_core.pydantic_v1 import BaseModel, Field

class AgentState(BaseModel):
    """
    State for the research agent system.
    This class defines the structure of data shared between agents in the workflow.
    """
    query: str = Field(
        description="The original user query"
    )
    research_results: List[Dict[str, Any]] = Field(
        default_factory=list, 
        description="Research results collected by the research agent"
    )
    intermediate_steps: List[Dict[str, Any]] = Field(
        default_factory=list, 
        description="Intermediate steps and thoughts from each agent"
    )
    final_answer: Optional[str] = Field(
        default=None, 
        description="The final answer generated by the drafting agent"
    )
    error: Optional[str] = Field(
        default=None, 
        description="Error message if something went wrong during processing"
    )
    
    def add_intermediate_step(self, agent_name: str, action: str, details: Dict[str, Any]) -> None:
        """
        Add an intermediate step to the state.
        
        Args:
            agent_name: Name of the agent performing the action
            action: Type of action performed
            details: Additional details about the action
        """
        self.intermediate_steps.append({
            "agent": agent_name,
            "action": action,
            **details
        })